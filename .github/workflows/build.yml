name: Deploy Dev Environment

on:
  push:
    branches:
      - develop

jobs:
  pre-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ECS_RUN_TASK_ROLE }}
          role-duration-seconds: 3600
      - name: Provide a self hosted to execute this job
        uses: PasseiDireto/gh-runner-task-action@main
        with:
          github_pat: ${{ secrets.PD_BOT_GITHUB_ACCESS_TOKEN }}
          task_definition: "gh-runner"
          cluster: "gh-runner"

  run-test:
    runs-on: self-hosted
    needs: pre-test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm i
      - name: Run Eslint Test 
        run: PD_NODE_ENV=development npm run eslint
      - name: Run Unit Test 
        run: PD_NODE_ENV=development npm rum coverage
      - name: Get branch
        id: branch
        shell: bash
        run: |
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/*/#} | cut -d/ -f3)"
      - name: Run Dev API Test 
        run: |
          PD_NODE_ENV=development npm run api-coverage
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_INTERNAL_URL }}
    outputs:
      jobStatus: ${{ job.status }}
    continue-on-error: true

  pre-deploy:
    runs-on: ubuntu-latest
    needs: run-test
    if: ${{ needs.run-test.outputs.jobStatus == 'success'}}
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ECS_RUN_TASK_ROLE }}
          role-duration-seconds: 3600
      - name: Provide a self hosted to execute this job
        uses: PasseiDireto/gh-runner-task-action@main
        with:
          github_pat: ${{ secrets.PD_BOT_GITHUB_ACCESS_TOKEN }}
          task_definition: "gh-runner"
          cluster: "gh-runner"

  deploy:
    runs-on: self-hosted
    needs: [run-test, pre-deploy]
    if: ${{ needs.run-test.outputs.jobStatus == 'success'}}
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          role-duration-seconds: 3600
      - name: checkout repository
        uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Install NPM dependencies
        run: npm i
      - name: deploy
        run: sls deploy -s dev --verbose
    outputs:
      jobStatus: ${{ job.status }}
    continue-on-error: true

  test-notification:
    needs: run-test
    runs-on: ubuntu-latest
    steps: 
      - name: slack failure notification
        if: ${{ needs.run-test.outputs.jobStatus != 'success'}}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: test-bot
          SLACK_COLOR: ${{ needs.run-test.outputs.jobStatus }} 
          SLACK_ICON: https://avatars.githubusercontent.com/u/6343056?s=50&v=4
          SLACK_MESSAGE: 'the step of run-test was not completed'
          SLACK_TITLE: run-test
          SLACK_USERNAME: pd-monetization
          SLACK_WEBHOOK: ${{ secrets.MONETIZATION_TEST_WEBHOOK }}

  deploy-notification:
    runs-on: ubuntu-latest
    needs: deploy
    steps:      
      - name: slack failure notification
        if: ${{ needs.deploy.outputs.jobStatus != 'success'}}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: test-bot
          SLACK_COLOR: ${{ needs.deploy.outputs.jobStatus }} 
          SLACK_ICON: https://avatars.githubusercontent.com/u/6343056?s=50&v=4
          SLACK_MESSAGE: 'the step of deploy was not completed, running commit ${{ steps.vars.outputs.commit }}'
          SLACK_TITLE: deploy
          SLACK_USERNAME: pd-monetization
          SLACK_WEBHOOK: ${{ secrets.MONETIZATION_TEST_WEBHOOK }}
      - name: slack success notification
        if: ${{ needs.deploy.outputs.jobStatus == 'success'}}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: test-bot
          SLACK_COLOR: ${{ needs.deploy.outputs.jobStatus }} 
          SLACK_ICON: https://avatars.githubusercontent.com/u/6343056?s=50&v=4
          SLACK_MESSAGE: 'the step of deploy was completed, running commit ${{ steps.vars.outputs.commit }}'
          SLACK_TITLE: deploy
          SLACK_USERNAME: pd-monetization
          SLACK_WEBHOOK: ${{ secrets.MONETIZATION_TEST_WEBHOOK }}
